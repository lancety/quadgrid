{"version":3,"file":"demo.bundle.js","mappings":"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","sources":["webpack:///./lib/quadgrid.ts","webpack:///./demo.ts"],"sourcesContent":["import {iBound, iQuadGrid, iQuadNode} from \"./quadgrid.type\";\r\n\r\nexport function QuadNode(bound: iBound, level: number): iQuadNode {\r\n    return {\r\n        bound,\r\n        level,\r\n        nodes: [],\r\n        rects: [],\r\n    }\r\n}\r\n\r\nexport class QuadGrid implements iQuadGrid {\r\n    root: iQuadNode;\r\n    cellMinSize: number;\r\n\r\n    constructor(public width, public height,\r\n                public cellDepthMax = 6, public cellItemsMax = 10) {\r\n        this.cellMinSize = Math.min(width, height) / Math.pow(2, cellDepthMax);\r\n        this.root = QuadNode([width / 2, height / 2, width / 2, height / 2], 0);\r\n    }\r\n\r\n    split(node: iQuadNode) {\r\n        const nextLevel = node.level + 1,\r\n            x = node.bound[0],\r\n            y = node.bound[1],\r\n            subWidth = node.bound[2] / 2,\r\n            subHeight = node.bound[3] / 2;\r\n\r\n        node.nodes.push(\r\n            //lt\r\n            QuadNode([\r\n                x - subWidth,\r\n                y - subHeight,\r\n                subWidth,\r\n                subHeight\r\n            ], nextLevel),\r\n\r\n            //rt\r\n            QuadNode([\r\n                x + subWidth,\r\n                y - subHeight,\r\n                subWidth,\r\n                subHeight\r\n            ], nextLevel),\r\n\r\n            //rb\r\n            QuadNode([\r\n                x + subWidth,\r\n                y + subHeight,\r\n                subWidth,\r\n                subHeight\r\n            ], nextLevel),\r\n\r\n            //lb\r\n            QuadNode([\r\n                x - subWidth,\r\n                y + subHeight,\r\n                subWidth,\r\n                subHeight\r\n            ], nextLevel),)\r\n    }\r\n\r\n    getIndex(node: iQuadNode, rect: iBound) {\r\n        let indexes = 0b0,\r\n            verticalMidpoint = node.bound[0] ,\r\n            horizontalMidpoint = node.bound[1];\r\n\r\n        const startIsNorth = rect[1] - rect[3] < horizontalMidpoint,\r\n            startIsWest = rect[0] - rect[2] < verticalMidpoint,\r\n            endIsEast = rect[0] + rect[2] > verticalMidpoint,\r\n            endIsSouth = rect[1] + rect[3] > horizontalMidpoint;\r\n\r\n        //lt\r\n        if (startIsWest && startIsNorth) {\r\n            indexes = indexes | 0b1;\r\n        }\r\n\r\n        //rt\r\n        if (startIsNorth && endIsEast) {\r\n            indexes = indexes | 0b10;\r\n        }\r\n\r\n        //rb\r\n        if (endIsEast && endIsSouth) {\r\n            indexes = indexes | 0b100;\r\n        }\r\n\r\n        //lb\r\n        if (startIsWest && endIsSouth) {\r\n            indexes = indexes | 0b1000;\r\n        }\r\n\r\n        return indexes;\r\n    }\r\n\r\n    merge(node: iQuadNode) {\r\n        node.rects.push(...this.allRects([], node));\r\n        node.nodes.splice(0);\r\n    }\r\n\r\n    inside(bound: iBound, rect: iBound) {\r\n        return bound[0] - bound[2] > rect[0] - rect[2] && bound[1] - bound[3] > rect[1] - rect[3] &&\r\n            bound[0] + bound[2] < rect[0] + rect[2] &&\r\n            bound[1] + bound[3] < rect[1] + rect[3];\r\n    }\r\n\r\n    insertBatch(node: iQuadNode, rect: iBound, method: string) {\r\n        const binaryIndexes = this.getIndex(node, rect);\r\n        binaryIndexes & 0b1 && this[method](node.nodes[0], rect);\r\n        binaryIndexes & 0b10 && this[method](node.nodes[1], rect);\r\n        binaryIndexes & 0b100 && this[method](node.nodes[2], rect);\r\n        binaryIndexes & 0b1000 && this[method](node.nodes[3], rect);\r\n    }\r\n\r\n    _times = [];\r\n    _timesCovered = [];\r\n\r\n    insertAsGrid(node: iQuadNode, rect: iBound) {\r\n        const newCoverTest = this.inside(node.bound, rect);\r\n        if (newCoverTest === true) {\r\n            if (node.covered !== true) {\r\n                this.merge(node);\r\n                node.taken = true;\r\n                node.covered = true;\r\n            }\r\n            node.rects.push(rect);\r\n            this._timesCovered.push(performance.now(), node.bound, node.level);\r\n        } else {\r\n            node.rects.push(rect);\r\n            if (node.nodes.length) {\r\n                this.insertBatch(node, rect, \"insertAsGrid\");\r\n                node.rects.splice(0);\r\n            } else if (node.covered !== true) {\r\n                if (node.level < this.cellDepthMax) {\r\n                    this.split(node);\r\n                    node.rects.forEach(rect => {\r\n                        this.insertBatch(node, rect, \"insertAsGrid\");\r\n                    })\r\n\r\n                    node.rects.splice(0);\r\n                }\r\n            }\r\n\r\n            if (node.nodes.length === 0 && node.rects.length > 0) {\r\n                node.taken = true;\r\n            } else {\r\n                delete node.taken;\r\n            }\r\n            this._times.push(performance.now(), node.bound, node.level);\r\n        }\r\n    }\r\n\r\n    insertAsTree(node: iQuadNode, rect: iBound) {\r\n\r\n        if (node.nodes.length) {\r\n            this.insertBatch(node, rect, \"insertAsTree\");\r\n            return;\r\n        }\r\n\r\n        node.rects.push(rect);\r\n        if (node.rects.length > this.cellItemsMax && node.level < this.cellDepthMax) {\r\n            if (!node.nodes.length) {\r\n                this.split(node);\r\n            }\r\n\r\n            node.rects.forEach(rect =>\r\n                this.insertBatch(node, rect, \"insertAsTree\")\r\n            )\r\n\r\n            node.rects.splice(0);\r\n        }\r\n    }\r\n\r\n    allNodes(nodeStore: iQuadNode[], node: iQuadNode): iQuadNode[] {\r\n        if (node.nodes.length > 0) {\r\n            node.nodes.forEach(n => {\r\n                this.allNodes(nodeStore, n);\r\n            })\r\n        } else {\r\n            nodeStore.push(node);\r\n        }\r\n        return nodeStore;\r\n    }\r\n\r\n    allRects(rectStore: iBound[], node: iQuadNode): iBound[] {\r\n        if (node.nodes.length > 0) {\r\n            node.nodes.forEach(n => {\r\n                this.allRects(rectStore, n);\r\n            })\r\n        } else {\r\n            rectStore.push(...node.rects);\r\n        }\r\n        return rectStore;\r\n    }\r\n\r\n    retrieve(node: iQuadNode, bound: iBound, rectStore?: iBound[]): Set<iBound> {\r\n        const indexes = this.getIndex(node, bound);\r\n        const store = rectStore || [];\r\n\r\n        if (node.nodes.length) {\r\n            indexes & 0b1 && this.retrieve(node.nodes[0], bound, store);\r\n            indexes & 0b10 && this.retrieve(node.nodes[1], bound, store);\r\n            indexes & 0b100 && this.retrieve(node.nodes[2], bound, store);\r\n            indexes & 0b1000 && this.retrieve(node.nodes[3], bound, store);\r\n        }\r\n\r\n        if (rectStore) {\r\n            node.nodes.length === 0 && rectStore.push(...node.rects);\r\n        } else {\r\n            return new Set(store);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.root.nodes.splice(0);\r\n        this.root.rects.splice(0);\r\n        delete this.root.taken;\r\n        delete this.root.covered;\r\n    }\r\n}\r\n","import {QuadGrid} from \"./lib/quadgrid\";\r\nimport {iBound, iQuadNode} from \"./lib/quadgrid.type\";\r\n\r\nconst width = 1200, height = 1000;\r\nconst min = 2, max = 10;\r\n\r\nlet maxDepth = 0, maxItems = 2;\r\nlet boundSize = Math.min(width, height);\r\nwhile (boundSize > min) {\r\n    boundSize /= 2;\r\n    maxDepth++;\r\n}\r\n\r\nconst grid = new QuadGrid(width, height, maxDepth, maxItems);\r\nconst focus = [0, 0, 20, 20];\r\n\r\n/*\r\n* states\r\n* */\r\nconst states = {\r\n    activeRects: new Set() as Set<iBound>,\r\n    activeNodes: [],\r\n    rects: [] as iBound[],\r\n}\r\n\r\n/*\r\n* init UI\r\n* */\r\nconst canvas = document.getElementById(\"canvas\")\r\ncanvas.setAttribute(\"width\", width + \"\");\r\ncanvas.setAttribute(\"height\", height + \"\");\r\ncanvas.style.background = \"#111\";\r\nconst ctx = (canvas as HTMLCanvasElement).getContext('2d');\r\n\r\n\r\n/*\r\n* mouse event\r\n* */\r\nlet mouseOn = false;\r\ncanvas.addEventListener(\"mousemove\", function (e: any) {\r\n    mouseOn = true;\r\n    if (!e.offsetX) {\r\n        e.offsetX = e.layerX - e.target.offsetLeft;\r\n        e.offsetY = e.layerY - e.target.offsetTop;\r\n    }\r\n    focus[0] = e.offsetX;\r\n    focus[1] = e.offsetY;\r\n});\r\ncanvas.addEventListener(\"mouseout\", function (e) {\r\n    mouseOn = false;\r\n});\r\n\r\n\r\n/*\r\n* main\r\n* */\r\n\r\n(function render() {\r\n    if (mouseOn) {\r\n        states.activeRects.clear();\r\n        states.activeRects = grid.retrieve(grid.root, focus);\r\n    }\r\n    _updateUI();\r\n    window.requestAnimationFrame(render);\r\n})()\r\n\r\n\r\n/*\r\n* quadtree util\r\n* */\r\nfunction _random(min, max) {\r\n    return Math.round(min + (Math.random() * (max - min)));\r\n}\r\n\r\n(window as any).addNodes = function (amount: number, large = false) {\r\n    const arrSize = Math.ceil(Math.sqrt(amount));\r\n    const arr = Array(arrSize).fill(null);\r\n    arr.forEach((ignore, r) => {\r\n        arr.forEach((ignore, c) => {\r\n            // // const w = _random(min, max) * (large ? 30 : 1) / 2;\r\n            // // const h = _random(min, max) * (large ? 30 : 1) / 2;\r\n            // const w = _random(min, max) * (large || (amount >= 10 && r < amount * 0.1) ? 30 : 1) / 2;\r\n            // const h = _random(min, max) * (large || (amount >= 10 && c < amount * 0.1) ? 30 : 1) / 2;\r\n            // states.rects.push( [\r\n            //     _random(w, width - w),\r\n            //     _random(h, height - h),\r\n            //     w,\r\n            //     h,\r\n            // ] as iBound)\r\n\r\n\r\n            const w  =min * (large || (amount >= 10 && r < amount * 0.1) ? 30 : 1) / 2;\r\n            const h = min * (large || (amount >= 10 && c < amount * 0.1) ? 30 : 1) / 2;\r\n            states.rects.push( [\r\n                w * 3 * r * 1.1 + w,\r\n                h * 3 * c * 1.1 + h,\r\n                w,\r\n                h,\r\n            ] as iBound)\r\n        })\r\n\r\n    })\r\n\r\n    const start = performance.now();\r\n    for (let i = 0; i < states.rects.length; i++) {\r\n        grid.insertAsGrid(grid.root, states.rects[i])\r\n        // grid.insertAsTree(grid.root, states.rects[i])\r\n    }\r\n    const startUi = performance.now();\r\n    console.log(`add ${amount} duration`, startUi - start)\r\n    console.log(`allNodes`, grid.allNodes([], grid.root));\r\n    console.log(`times`, grid._times.length / 3, grid._times);\r\n    console.log(`timesCovered`, grid._timesCovered.length / 3, grid._timesCovered);\r\n}\r\n\r\n\r\n/*\r\n* render util\r\n* */\r\nfunction _updateUI() {\r\n    ctx.clearRect(0, 0, width, height);\r\n\r\n    document.getElementById(\"info_count\").innerText = states.rects.length + \"\";\r\n    document.getElementById(\"info_involved\").innerText = (states.activeRects?.size || 0) + \"\";\r\n\r\n    // draw focus rect\r\n    if (mouseOn) {\r\n        ctx.fillStyle = 'rgba(255,255,255,0.5)';\r\n        // @ts-ignore\r\n        ctx.fillRect(..._getBound(focus));\r\n    }\r\n\r\n    // draw grid\r\n    _drawGridNodes(grid.root);\r\n    _drawGridTaken(grid.root);\r\n    _drawGridTakenStroke(grid.root);\r\n\r\n    // draw objects\r\n    states.rects.forEach(rects => {\r\n        if (states.activeRects.has(rects)) {\r\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\r\n            // @ts-ignore\r\n            ctx.fillRect(..._getBound(rects));\r\n        } else {\r\n            ctx.strokeStyle = 'rgba(255, 0, 0, 1)';\r\n            // @ts-ignore\r\n            ctx.strokeRect(..._getBound(rects))\r\n        }\r\n    })\r\n}\r\n\r\nfunction _drawGridNodes(node: iQuadNode) {\r\n    if (node.nodes.length) {\r\n        node.nodes.forEach(node => _drawGridNodes(node));\r\n    } else {\r\n        if (!node.taken) {\r\n            ctx.strokeStyle = \"rgba(0, 255, 0, 0.4)\";\r\n            // @ts-ignore\r\n            ctx.strokeRect(..._getBound(node.bound))\r\n        }\r\n    }\r\n}\r\n\r\nfunction _drawGridTaken(node: iQuadNode) {\r\n    if (node.nodes.length) {\r\n        node.nodes.forEach(node => _drawGridTaken(node));\r\n    } else {\r\n        if (node.taken) {\r\n            ctx.fillStyle = \"rgba(255,255,255, 0.8)\";\r\n            // @ts-ignore\r\n            ctx.fillRect(..._getBound(node.bound))\r\n        }\r\n    }\r\n}\r\n\r\nfunction _drawGridTakenStroke(node: iQuadNode) {\r\n    if (node.nodes.length) {\r\n        node.nodes.forEach(node => _drawGridTakenStroke(node));\r\n    } else {\r\n        if (node.taken) {\r\n            ctx.strokeStyle = \"rgba(6, 6, 6, 0.8)\";\r\n            // @ts-ignore\r\n            ctx.strokeRect(..._getBound(node.bound))\r\n        }\r\n    }\r\n}\r\n\r\nfunction _getBound(bound: iBound) {\r\n    return [bound[0] - bound[2], bound[1] - bound[3], bound[2] * 2, bound[3] * 2];\r\n}"],"names":["QuadNode","bound","level","nodes","rects","width","height","maxDepth","boundSize","Math","min","grid","constructor","cellDepthMax","cellItemsMax","_times","_timesCovered","this","cellMinSize","pow","root","split","node","nextLevel","x","y","subWidth","subHeight","push","getIndex","rect","indexes","verticalMidpoint","horizontalMidpoint","startIsNorth","startIsWest","endIsEast","endIsSouth","merge","allRects","splice","inside","insertBatch","method","binaryIndexes","insertAsGrid","covered","taken","performance","now","length","forEach","insertAsTree","allNodes","nodeStore","n","rectStore","retrieve","store","Set","clear","states","activeRects","activeNodes","canvas","document","getElementById","setAttribute","style","background","ctx","getContext","mouseOn","_drawGridNodes","strokeStyle","strokeRect","_getBound","_drawGridTaken","fillStyle","fillRect","_drawGridTakenStroke","addEventListener","e","offsetX","layerX","target","offsetLeft","offsetY","layerY","offsetTop","render","clearRect","innerText","size","has","window","requestAnimationFrame","addNodes","amount","large","arrSize","ceil","sqrt","arr","Array","fill","ignore","r","c","w","h","start","i","startUi","console","log"],"sourceRoot":""}
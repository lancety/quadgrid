{"version":3,"file":"demo.bundle.js","mappings":"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","sources":["webpack:///./lib/quadgrid.ts","webpack:///./demo.ts"],"sourcesContent":["import {iBound, iQuadGridFactory, iQuadNode} from \"./quadgrid.type\";\r\n\r\nexport function QuadNode (bound: iBound, level: number): iQuadNode {\r\n    return {\r\n        bound,\r\n        level,\r\n        nodes: [],\r\n        rects: [],\r\n    }\r\n}\r\n\r\nexport class QuadGridFactory implements iQuadGridFactory {\r\n    root: iQuadNode;\r\n    rects: iBound[] = [];\r\n\r\n    constructor(public width, public height,\r\n                public cellDepthMax = 6, public cellObjMax = 10) {\r\n        this.root = QuadNode([0, 0, width, height], 0);\r\n    }\r\n\r\n    split(node: iQuadNode) {\r\n        const nextLevel = node.level + 1,\r\n            subWidth = node.bound[2] / 2,\r\n            subHeight = node.bound[3] / 2,\r\n            x = node.bound[0],\r\n            y = node.bound[1];\r\n\r\n        //lt\r\n        node.nodes[0] = QuadNode([\r\n            x,\r\n            y,\r\n            subWidth,\r\n            subHeight\r\n        ], nextLevel);\r\n\r\n        //rt\r\n        node.nodes[1] = QuadNode([\r\n            x + subWidth,\r\n            y,\r\n            subWidth,\r\n            subHeight\r\n        ], nextLevel);\r\n\r\n        //rb\r\n        node.nodes[2] = QuadNode([\r\n            x + subWidth,\r\n            y + subHeight,\r\n            subWidth,\r\n            subHeight\r\n        ], nextLevel);\r\n\r\n        //lb\r\n        node.nodes[3] = QuadNode([\r\n            x,\r\n            y + subHeight,\r\n            subWidth,\r\n            subHeight\r\n        ], nextLevel);\r\n    }\r\n\r\n    getIndex(node: iQuadNode, bound: iBound) {\r\n        let indexes = 0b0,\r\n            verticalMidpoint = node.bound[0] + (node.bound[2] / 2),\r\n            horizontalMidpoint = node.bound[1] + (node.bound[3] / 2);\r\n\r\n        const startIsNorth = bound[1] < horizontalMidpoint,\r\n            startIsWest = bound[0] < verticalMidpoint,\r\n            endIsEast = bound[0] + bound[2] > verticalMidpoint,\r\n            endIsSouth = bound[1] + bound[3] > horizontalMidpoint;\r\n\r\n        //lt\r\n        if (startIsWest && startIsNorth) {\r\n            indexes = indexes | 0b1;\r\n        }\r\n\r\n        //rt\r\n        if (startIsNorth && endIsEast) {\r\n            indexes = indexes | 0b10;\r\n        }\r\n\r\n        //rb\r\n        if (endIsEast && endIsSouth) {\r\n            indexes = indexes | 0b100;\r\n        }\r\n\r\n        //lb\r\n        if (startIsWest && endIsSouth) {\r\n            indexes = indexes | 0b1000;\r\n        }\r\n\r\n        return indexes;\r\n    }\r\n\r\n    merge(node: iQuadNode) {\r\n        node.nodes.splice(0);\r\n        node.rects.push(...this.objectsAll([], node));\r\n    }\r\n\r\n    inside(boundSmall: iBound, boundLarge: iBound) {\r\n        return boundSmall[0] > boundLarge[0] && boundSmall[1] > boundLarge[1] &&\r\n            boundSmall[0] + boundSmall[2] < boundLarge[0] + boundLarge[2] &&\r\n            boundSmall[1] + boundSmall[3] < boundLarge[1] + boundLarge[3];\r\n    }\r\n\r\n    insertBatch(node: iQuadNode, bound: iBound, method: string) {\r\n        const binaryIndexes = this.getIndex(node, bound);\r\n        binaryIndexes & 0b1 && this[method](node.nodes[0], bound);\r\n        binaryIndexes & 0b10 && this[method](node.nodes[1], bound);\r\n        binaryIndexes & 0b100 && this[method](node.nodes[2], bound);\r\n        binaryIndexes & 0b1000 && this[method](node.nodes[3], bound);\r\n    }\r\n\r\n    insertAsGrid(node: iQuadNode, bound: iBound) {\r\n        this.rects.push(bound);\r\n\r\n        const newCoverTest = this.inside(node.bound, bound);\r\n        if (newCoverTest === true) {\r\n            if (node.covered !== true) {\r\n                this.merge(node);\r\n                node.taken = true;\r\n                node.covered = true;\r\n            }\r\n            node.rects.push(bound);\r\n            return;\r\n        }\r\n\r\n        node.rects.push(bound);\r\n        if (node.nodes.length) {\r\n            this.insertBatch(node, bound, \"insertAsGrid\");\r\n            node.rects.splice(0);\r\n        } else if (node.covered !== true) {\r\n            if (node.level < this.cellDepthMax) {\r\n                this.split(node);\r\n                node.rects.forEach(rect => {\r\n                    this.insertBatch(node, rect, \"insertAsGrid\");\r\n                })\r\n\r\n                node.rects.splice(0);\r\n            }\r\n        }\r\n\r\n        if (node.nodes.length === 0 && node.rects.length > 0) {\r\n            node.taken = true;\r\n        } else {\r\n            delete node.taken;\r\n        }\r\n    }\r\n\r\n    insertAsTree(node: iQuadNode, bound: iBound) {\r\n        this.rects.push(bound);\r\n\r\n        if (node.nodes.length) {\r\n            this.insertBatch(node, bound, \"insertAsTree\");\r\n            return;\r\n        }\r\n\r\n        node.rects.push(bound);\r\n        if (node.rects.length > this.cellObjMax && node.level < this.cellDepthMax) {\r\n            if (!node.nodes.length) {\r\n                this.split(node);\r\n            }\r\n\r\n            node.rects.forEach(bound =>\r\n                this.insertBatch(node, bound, \"insertAsTree\")\r\n            )\r\n\r\n            node.rects.splice(0);\r\n        }\r\n    }\r\n\r\n    objectsAll(bounds: iBound[], node: iQuadNode): iBound[] {\r\n        if (node.nodes.length > 0) {\r\n            node.nodes.forEach(n => {\r\n                this.objectsAll(bounds, n);\r\n            })\r\n        } else {\r\n            bounds.push(...node.rects);\r\n        }\r\n        return bounds;\r\n    }\r\n\r\n    retrieve(node: iQuadNode, bound: iBound, objStore?: iBound[]): Set<iBound> {\r\n        const indexes = this.getIndex(node, bound);\r\n        const store = objStore || [];\r\n        store.push(...node.rects);\r\n\r\n        if (node.nodes.length) {\r\n            indexes & 0b1 && this.retrieve(node.nodes[0], bound, store);\r\n            indexes & 0b10 && this.retrieve(node.nodes[1], bound, store);\r\n            indexes & 0b100 && this.retrieve(node.nodes[2], bound, store);\r\n            indexes & 0b1000 && this.retrieve(node.nodes[3], bound, store);\r\n        }\r\n\r\n        if (store.length > 0) {\r\n            console.log(\"111\")\r\n        }\r\n\r\n        if (objStore) {\r\n            objStore.push(...store);\r\n        } else {\r\n            return new Set(store);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.root.nodes.splice(0);\r\n        this.root.rects.splice(0);\r\n        delete this.root.taken;\r\n        delete this.root.covered;\r\n    }\r\n}\r\n","import {QuadGridFactory} from \"./lib/quadgrid\";\r\nimport {iBound, iQuadNode} from \"./lib/quadgrid.type\";\r\n\r\nconst width = 1200, height = 800;\r\nconst min = 2, max = 10;\r\n\r\nlet maxDepth = 0;\r\nlet boundSize = Math.min(width, height);\r\nwhile (boundSize > min) {\r\n    boundSize /= 2;\r\n    maxDepth++;\r\n}\r\n\r\nconst factory = new QuadGridFactory(width, height, maxDepth);\r\nconst focus = [0, 0, max, max];\r\n\r\n/*\r\n* states\r\n* */\r\nconst states = {\r\n    activeNodes: new Set() as Set<iBound>,\r\n}\r\n\r\n/*\r\n* init UI\r\n* */\r\nconst canvas = document.getElementById(\"canvas\")\r\ncanvas.setAttribute(\"width\", width + \"\");\r\ncanvas.setAttribute(\"height\", height + \"\");\r\ncanvas.style.background = \"#333\";\r\nconst ctx = (canvas as HTMLCanvasElement).getContext('2d');\r\n\r\n\r\n/*\r\n* mouse event\r\n* */\r\nlet mouseOn = false;\r\ncanvas.addEventListener(\"mousemove\", function(e: any) {\r\n    mouseOn = true;\r\n    if (!e.offsetX) {\r\n        e.offsetX = e.layerX - e.target.offsetLeft;\r\n        e.offsetY = e.layerY - e.target.offsetTop;\r\n    }\r\n    focus[0] = e.offsetX - (focus[2] / 2);\r\n    focus[1] = e.offsetY - (focus[3] / 2);\r\n});\r\ncanvas.addEventListener(\"mouseout\", function (e) {\r\n    mouseOn = false;\r\n});\r\n\r\n\r\n/*\r\n* main\r\n* */\r\n\r\n(function render(){\r\n    if (mouseOn) {\r\n        // states.activeNodes.clear();\r\n        // states.activeNodes = factory.retrieve(factory.root, focus);\r\n        console.log(\"states\");\r\n    }\r\n    _updateUI();\r\n    window.requestAnimationFrame(render);\r\n})()\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n* quadtree util\r\n* */\r\nfunction _random(min, max) {\r\n    return Math.round(min + (Math.random() * (max - min)));\r\n}\r\n(window as any).addNodes = function(amount: number, large = false) {\r\n    const rects = Array(amount).fill(null).map((ignore, ind) => {\r\n        return [\r\n            _random(0, width - max),\r\n            _random(0, height - max),\r\n            _random(min, max) * (large || (amount >= 10 && ind < amount * 0.1) ? 10 : 1),\r\n            _random(min, max) * (large || (amount >= 10 && ind > amount * 0.9) ? 10 : 1),\r\n        ] as iBound\r\n    })\r\n\r\n    const start = performance.now();\r\n    for (let i=0;i< rects.length; i++) {\r\n        factory.insertAsGrid(factory.root, rects[i])\r\n    }\r\n    const startUi = performance.now();\r\n    console.log(`add ${amount} duration`, startUi - start)\r\n    _updateUI();\r\n    console.log(`ui ${amount} duration`, performance.now() - startUi)\r\n}\r\n\r\n\r\n/*\r\n* render util\r\n* */\r\nfunction _updateUI() {\r\n    ctx.clearRect(0,0,width, height);\r\n\r\n    document.getElementById(\"info_count\").innerText = factory.rects.length + \"\";\r\n    document.getElementById(\"info_involved\").innerText = ((states.activeNodes?.size || 0) / factory.rects.length) + \"\";\r\n\r\n    // draw focus rect\r\n    if (mouseOn) {\r\n        ctx.fillStyle = 'rgba(255,255,255,0.5)';\r\n        // @ts-ignore\r\n        ctx.fillRect(...focus);\r\n    }\r\n\r\n    // draw objects\r\n    factory.rects.forEach(bound => {\r\n        if (states.activeNodes.has(bound)) {\r\n            ctx.fillStyle = 'rgba(0, 255, 0)';\r\n        } else {\r\n            ctx.fillStyle = 'rgba(255, 255, 255)';\r\n        }\r\n        // @ts-ignore\r\n        ctx.fillRect(...bound);\r\n    })\r\n\r\n    // draw grid\r\n    _drawGridNodes(factory.root);\r\n}\r\n\r\nfunction _drawGridNodes(node: iQuadNode) {\r\n    if (node.nodes.length) {\r\n        node.nodes.forEach(node => _drawGridNodes(node));\r\n    } else {\r\n        if (node.taken) {\r\n            ctx.strokeStyle = \"rgba(255,255,255, 0.6)\";\r\n        } else {\r\n            ctx.strokeStyle = \"rgba(255, 0, 255, 0.6)\";\r\n        }\r\n        // @ts-ignore\r\n        ctx.strokeRect(...node.bound)\r\n    }\r\n}"],"names":["QuadNode","bound","level","nodes","rects","width","maxDepth","boundSize","Math","min","factory","constructor","height","cellDepthMax","cellObjMax","this","root","split","node","nextLevel","subWidth","subHeight","x","y","getIndex","indexes","verticalMidpoint","horizontalMidpoint","startIsNorth","startIsWest","endIsEast","endIsSouth","merge","splice","push","objectsAll","inside","boundSmall","boundLarge","insertBatch","method","binaryIndexes","insertAsGrid","covered","taken","length","forEach","rect","insertAsTree","bounds","n","retrieve","objStore","store","console","log","Set","clear","states","activeNodes","canvas","document","getElementById","setAttribute","style","background","ctx","getContext","mouseOn","_random","max","round","random","_updateUI","clearRect","innerText","size","fillStyle","fillRect","has","_drawGridNodes","strokeStyle","strokeRect","addEventListener","e","offsetX","layerX","target","offsetLeft","offsetY","layerY","offsetTop","render","window","requestAnimationFrame","addNodes","amount","large","Array","fill","map","ignore","ind","start","performance","now","i","startUi"],"sourceRoot":""}